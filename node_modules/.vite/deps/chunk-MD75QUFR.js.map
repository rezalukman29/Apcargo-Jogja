{
  "version": 3,
  "sources": ["../../@ctrl/tinycolor/dist/module/util.js", "../../@ctrl/tinycolor/dist/module/conversion.js", "../../@ctrl/tinycolor/dist/module/css-color-names.js", "../../@ctrl/tinycolor/dist/module/format-input.js", "../../@ctrl/tinycolor/dist/module/index.js", "../../@ctrl/tinycolor/dist/module/readability.js", "../../@ctrl/tinycolor/dist/module/random.js", "../../@chakra-ui/theme-tools/dist/chakra-ui-theme-tools.esm.js"],
  "sourcesContent": ["/**\n * Take input from [0, n] and return it as [0, 1]\n * @hidden\n */\nexport function bound01(n, max) {\n    if (isOnePointZero(n)) {\n        n = '100%';\n    }\n    var isPercent = isPercentage(n);\n    n = max === 360 ? n : Math.min(max, Math.max(0, parseFloat(n)));\n    // Automatically convert percentage into number\n    if (isPercent) {\n        n = parseInt(String(n * max), 10) / 100;\n    }\n    // Handle floating point rounding errors\n    if (Math.abs(n - max) < 0.000001) {\n        return 1;\n    }\n    // Convert into [0, 1] range if it isn't already\n    if (max === 360) {\n        // If n is a hue given in degrees,\n        // wrap around out-of-range values into [0, 360] range\n        // then convert into [0, 1].\n        n = (n < 0 ? (n % max) + max : n % max) / parseFloat(String(max));\n    }\n    else {\n        // If n not a hue given in degrees\n        // Convert into [0, 1] range if it isn't already.\n        n = (n % max) / parseFloat(String(max));\n    }\n    return n;\n}\n/**\n * Force a number between 0 and 1\n * @hidden\n */\nexport function clamp01(val) {\n    return Math.min(1, Math.max(0, val));\n}\n/**\n * Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n * <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n * @hidden\n */\nexport function isOnePointZero(n) {\n    return typeof n === 'string' && n.indexOf('.') !== -1 && parseFloat(n) === 1;\n}\n/**\n * Check to see if string passed in is a percentage\n * @hidden\n */\nexport function isPercentage(n) {\n    return typeof n === 'string' && n.indexOf('%') !== -1;\n}\n/**\n * Return a valid alpha value [0,1] with all invalid values being set to 1\n * @hidden\n */\nexport function boundAlpha(a) {\n    a = parseFloat(a);\n    if (isNaN(a) || a < 0 || a > 1) {\n        a = 1;\n    }\n    return a;\n}\n/**\n * Replace a decimal with it's percentage value\n * @hidden\n */\nexport function convertToPercentage(n) {\n    if (n <= 1) {\n        return \"\".concat(Number(n) * 100, \"%\");\n    }\n    return n;\n}\n/**\n * Force a hex value to have 2 characters\n * @hidden\n */\nexport function pad2(c) {\n    return c.length === 1 ? '0' + c : String(c);\n}\n", "import { bound01, pad2 } from './util.js';\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n/**\n * Handle bounds / percentage checking to conform to CSS color spec\n * <http://www.w3.org/TR/css3-color/>\n * *Assumes:* r, g, b in [0, 255] or [0, 1]\n * *Returns:* { r, g, b } in [0, 255]\n */\nexport function rgbToRgb(r, g, b) {\n    return {\n        r: bound01(r, 255) * 255,\n        g: bound01(g, 255) * 255,\n        b: bound01(b, 255) * 255,\n    };\n}\n/**\n * Converts an RGB color value to HSL.\n * *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n * *Returns:* { h, s, l } in [0,1]\n */\nexport function rgbToHsl(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var h = 0;\n    var s = 0;\n    var l = (max + min) / 2;\n    if (max === min) {\n        s = 0;\n        h = 0; // achromatic\n    }\n    else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch (max) {\n            case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n            default:\n                break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, l: l };\n}\nfunction hue2rgb(p, q, t) {\n    if (t < 0) {\n        t += 1;\n    }\n    if (t > 1) {\n        t -= 1;\n    }\n    if (t < 1 / 6) {\n        return p + (q - p) * (6 * t);\n    }\n    if (t < 1 / 2) {\n        return q;\n    }\n    if (t < 2 / 3) {\n        return p + (q - p) * (2 / 3 - t) * 6;\n    }\n    return p;\n}\n/**\n * Converts an HSL color value to RGB.\n *\n * *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n * *Returns:* { r, g, b } in the set [0, 255]\n */\nexport function hslToRgb(h, s, l) {\n    var r;\n    var g;\n    var b;\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n    if (s === 0) {\n        // achromatic\n        g = l;\n        b = l;\n        r = l;\n    }\n    else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1 / 3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1 / 3);\n    }\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n/**\n * Converts an RGB color value to HSV\n *\n * *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n * *Returns:* { h, s, v } in [0,1]\n */\nexport function rgbToHsv(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var h = 0;\n    var v = max;\n    var d = max - min;\n    var s = max === 0 ? 0 : d / max;\n    if (max === min) {\n        h = 0; // achromatic\n    }\n    else {\n        switch (max) {\n            case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n            default:\n                break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, v: v };\n}\n/**\n * Converts an HSV color value to RGB.\n *\n * *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n * *Returns:* { r, g, b } in the set [0, 255]\n */\nexport function hsvToRgb(h, s, v) {\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n    var i = Math.floor(h);\n    var f = h - i;\n    var p = v * (1 - s);\n    var q = v * (1 - f * s);\n    var t = v * (1 - (1 - f) * s);\n    var mod = i % 6;\n    var r = [v, q, p, p, t, v][mod];\n    var g = [t, v, v, q, p, p][mod];\n    var b = [p, p, t, v, v, q][mod];\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n/**\n * Converts an RGB color to hex\n *\n * Assumes r, g, and b are contained in the set [0, 255]\n * Returns a 3 or 6 character hex\n */\nexport function rgbToHex(r, g, b, allow3Char) {\n    var hex = [\n        pad2(Math.round(r).toString(16)),\n        pad2(Math.round(g).toString(16)),\n        pad2(Math.round(b).toString(16)),\n    ];\n    // Return a 3 character hex if possible\n    if (allow3Char &&\n        hex[0].startsWith(hex[0].charAt(1)) &&\n        hex[1].startsWith(hex[1].charAt(1)) &&\n        hex[2].startsWith(hex[2].charAt(1))) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n    return hex.join('');\n}\n/**\n * Converts an RGBA color plus alpha transparency to hex\n *\n * Assumes r, g, b are contained in the set [0, 255] and\n * a in [0, 1]. Returns a 4 or 8 character rgba hex\n */\n// eslint-disable-next-line max-params\nexport function rgbaToHex(r, g, b, a, allow4Char) {\n    var hex = [\n        pad2(Math.round(r).toString(16)),\n        pad2(Math.round(g).toString(16)),\n        pad2(Math.round(b).toString(16)),\n        pad2(convertDecimalToHex(a)),\n    ];\n    // Return a 4 character hex if possible\n    if (allow4Char &&\n        hex[0].startsWith(hex[0].charAt(1)) &&\n        hex[1].startsWith(hex[1].charAt(1)) &&\n        hex[2].startsWith(hex[2].charAt(1)) &&\n        hex[3].startsWith(hex[3].charAt(1))) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n    return hex.join('');\n}\n/**\n * Converts an RGBA color to an ARGB Hex8 string\n * Rarely used, but required for \"toFilter()\"\n */\nexport function rgbaToArgbHex(r, g, b, a) {\n    var hex = [\n        pad2(convertDecimalToHex(a)),\n        pad2(Math.round(r).toString(16)),\n        pad2(Math.round(g).toString(16)),\n        pad2(Math.round(b).toString(16)),\n    ];\n    return hex.join('');\n}\n/** Converts a decimal to a hex value */\nexport function convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n}\n/** Converts a hex value to a decimal */\nexport function convertHexToDecimal(h) {\n    return parseIntFromHex(h) / 255;\n}\n/** Parse a base-16 hex value into a base-10 integer */\nexport function parseIntFromHex(val) {\n    return parseInt(val, 16);\n}\nexport function numberInputToObject(color) {\n    return {\n        r: color >> 16,\n        g: (color & 0xff00) >> 8,\n        b: color & 0xff,\n    };\n}\n", "// https://github.com/bahamas10/css-color-names/blob/master/css-color-names.json\n/**\n * @hidden\n */\nexport var names = {\n    aliceblue: '#f0f8ff',\n    antiquewhite: '#faebd7',\n    aqua: '#00ffff',\n    aquamarine: '#7fffd4',\n    azure: '#f0ffff',\n    beige: '#f5f5dc',\n    bisque: '#ffe4c4',\n    black: '#000000',\n    blanchedalmond: '#ffebcd',\n    blue: '#0000ff',\n    blueviolet: '#8a2be2',\n    brown: '#a52a2a',\n    burlywood: '#deb887',\n    cadetblue: '#5f9ea0',\n    chartreuse: '#7fff00',\n    chocolate: '#d2691e',\n    coral: '#ff7f50',\n    cornflowerblue: '#6495ed',\n    cornsilk: '#fff8dc',\n    crimson: '#dc143c',\n    cyan: '#00ffff',\n    darkblue: '#00008b',\n    darkcyan: '#008b8b',\n    darkgoldenrod: '#b8860b',\n    darkgray: '#a9a9a9',\n    darkgreen: '#006400',\n    darkgrey: '#a9a9a9',\n    darkkhaki: '#bdb76b',\n    darkmagenta: '#8b008b',\n    darkolivegreen: '#556b2f',\n    darkorange: '#ff8c00',\n    darkorchid: '#9932cc',\n    darkred: '#8b0000',\n    darksalmon: '#e9967a',\n    darkseagreen: '#8fbc8f',\n    darkslateblue: '#483d8b',\n    darkslategray: '#2f4f4f',\n    darkslategrey: '#2f4f4f',\n    darkturquoise: '#00ced1',\n    darkviolet: '#9400d3',\n    deeppink: '#ff1493',\n    deepskyblue: '#00bfff',\n    dimgray: '#696969',\n    dimgrey: '#696969',\n    dodgerblue: '#1e90ff',\n    firebrick: '#b22222',\n    floralwhite: '#fffaf0',\n    forestgreen: '#228b22',\n    fuchsia: '#ff00ff',\n    gainsboro: '#dcdcdc',\n    ghostwhite: '#f8f8ff',\n    goldenrod: '#daa520',\n    gold: '#ffd700',\n    gray: '#808080',\n    green: '#008000',\n    greenyellow: '#adff2f',\n    grey: '#808080',\n    honeydew: '#f0fff0',\n    hotpink: '#ff69b4',\n    indianred: '#cd5c5c',\n    indigo: '#4b0082',\n    ivory: '#fffff0',\n    khaki: '#f0e68c',\n    lavenderblush: '#fff0f5',\n    lavender: '#e6e6fa',\n    lawngreen: '#7cfc00',\n    lemonchiffon: '#fffacd',\n    lightblue: '#add8e6',\n    lightcoral: '#f08080',\n    lightcyan: '#e0ffff',\n    lightgoldenrodyellow: '#fafad2',\n    lightgray: '#d3d3d3',\n    lightgreen: '#90ee90',\n    lightgrey: '#d3d3d3',\n    lightpink: '#ffb6c1',\n    lightsalmon: '#ffa07a',\n    lightseagreen: '#20b2aa',\n    lightskyblue: '#87cefa',\n    lightslategray: '#778899',\n    lightslategrey: '#778899',\n    lightsteelblue: '#b0c4de',\n    lightyellow: '#ffffe0',\n    lime: '#00ff00',\n    limegreen: '#32cd32',\n    linen: '#faf0e6',\n    magenta: '#ff00ff',\n    maroon: '#800000',\n    mediumaquamarine: '#66cdaa',\n    mediumblue: '#0000cd',\n    mediumorchid: '#ba55d3',\n    mediumpurple: '#9370db',\n    mediumseagreen: '#3cb371',\n    mediumslateblue: '#7b68ee',\n    mediumspringgreen: '#00fa9a',\n    mediumturquoise: '#48d1cc',\n    mediumvioletred: '#c71585',\n    midnightblue: '#191970',\n    mintcream: '#f5fffa',\n    mistyrose: '#ffe4e1',\n    moccasin: '#ffe4b5',\n    navajowhite: '#ffdead',\n    navy: '#000080',\n    oldlace: '#fdf5e6',\n    olive: '#808000',\n    olivedrab: '#6b8e23',\n    orange: '#ffa500',\n    orangered: '#ff4500',\n    orchid: '#da70d6',\n    palegoldenrod: '#eee8aa',\n    palegreen: '#98fb98',\n    paleturquoise: '#afeeee',\n    palevioletred: '#db7093',\n    papayawhip: '#ffefd5',\n    peachpuff: '#ffdab9',\n    peru: '#cd853f',\n    pink: '#ffc0cb',\n    plum: '#dda0dd',\n    powderblue: '#b0e0e6',\n    purple: '#800080',\n    rebeccapurple: '#663399',\n    red: '#ff0000',\n    rosybrown: '#bc8f8f',\n    royalblue: '#4169e1',\n    saddlebrown: '#8b4513',\n    salmon: '#fa8072',\n    sandybrown: '#f4a460',\n    seagreen: '#2e8b57',\n    seashell: '#fff5ee',\n    sienna: '#a0522d',\n    silver: '#c0c0c0',\n    skyblue: '#87ceeb',\n    slateblue: '#6a5acd',\n    slategray: '#708090',\n    slategrey: '#708090',\n    snow: '#fffafa',\n    springgreen: '#00ff7f',\n    steelblue: '#4682b4',\n    tan: '#d2b48c',\n    teal: '#008080',\n    thistle: '#d8bfd8',\n    tomato: '#ff6347',\n    turquoise: '#40e0d0',\n    violet: '#ee82ee',\n    wheat: '#f5deb3',\n    white: '#ffffff',\n    whitesmoke: '#f5f5f5',\n    yellow: '#ffff00',\n    yellowgreen: '#9acd32',\n};\n", "/* eslint-disable @typescript-eslint/no-redundant-type-constituents */\nimport { convertHexToDecimal, hslToRgb, hsvToRgb, parseIntFromHex, rgbToRgb, } from './conversion.js';\nimport { names } from './css-color-names.js';\nimport { boundAlpha, convertToPercentage } from './util.js';\n/**\n * Given a string or object, convert that input to RGB\n *\n * Possible string inputs:\n * ```\n * \"red\"\n * \"#f00\" or \"f00\"\n * \"#ff0000\" or \"ff0000\"\n * \"#ff000000\" or \"ff000000\"\n * \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n * \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n * \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n * \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n * \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n * \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n * \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n * ```\n */\nexport function inputToRGB(color) {\n    var rgb = { r: 0, g: 0, b: 0 };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n    if (typeof color === 'string') {\n        color = stringInputToObject(color);\n    }\n    if (typeof color === 'object') {\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n            rgb = rgbToRgb(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === '%' ? 'prgb' : 'rgb';\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n            s = convertToPercentage(color.s);\n            v = convertToPercentage(color.v);\n            rgb = hsvToRgb(color.h, s, v);\n            ok = true;\n            format = 'hsv';\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n            s = convertToPercentage(color.s);\n            l = convertToPercentage(color.l);\n            rgb = hslToRgb(color.h, s, l);\n            ok = true;\n            format = 'hsl';\n        }\n        if (Object.prototype.hasOwnProperty.call(color, 'a')) {\n            a = color.a;\n        }\n    }\n    a = boundAlpha(a);\n    return {\n        ok: ok,\n        format: color.format || format,\n        r: Math.min(255, Math.max(rgb.r, 0)),\n        g: Math.min(255, Math.max(rgb.g, 0)),\n        b: Math.min(255, Math.max(rgb.b, 0)),\n        a: a,\n    };\n}\n// <http://www.w3.org/TR/css3-values/#integers>\nvar CSS_INTEGER = '[-\\\\+]?\\\\d+%?';\n// <http://www.w3.org/TR/css3-values/#number-value>\nvar CSS_NUMBER = '[-\\\\+]?\\\\d*\\\\.\\\\d+%?';\n// Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\nvar CSS_UNIT = \"(?:\".concat(CSS_NUMBER, \")|(?:\").concat(CSS_INTEGER, \")\");\n// Actual matching.\n// Parentheses and commas are optional, but not required.\n// Whitespace can take the place of commas or opening paren\nvar PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\".concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")\\\\s*\\\\)?\");\nvar PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\".concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")\\\\s*\\\\)?\");\nvar matchers = {\n    CSS_UNIT: new RegExp(CSS_UNIT),\n    rgb: new RegExp('rgb' + PERMISSIVE_MATCH3),\n    rgba: new RegExp('rgba' + PERMISSIVE_MATCH4),\n    hsl: new RegExp('hsl' + PERMISSIVE_MATCH3),\n    hsla: new RegExp('hsla' + PERMISSIVE_MATCH4),\n    hsv: new RegExp('hsv' + PERMISSIVE_MATCH3),\n    hsva: new RegExp('hsva' + PERMISSIVE_MATCH4),\n    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n};\n/**\n * Permissive string parsing.  Take in a number of formats, and output an object\n * based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\n */\nexport function stringInputToObject(color) {\n    color = color.trim().toLowerCase();\n    if (color.length === 0) {\n        return false;\n    }\n    var named = false;\n    if (names[color]) {\n        color = names[color];\n        named = true;\n    }\n    else if (color === 'transparent') {\n        return { r: 0, g: 0, b: 0, a: 0, format: 'name' };\n    }\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match = matchers.rgb.exec(color);\n    if (match) {\n        return { r: match[1], g: match[2], b: match[3] };\n    }\n    match = matchers.rgba.exec(color);\n    if (match) {\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    match = matchers.hsl.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], l: match[3] };\n    }\n    match = matchers.hsla.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    match = matchers.hsv.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], v: match[3] };\n    }\n    match = matchers.hsva.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n    }\n    match = matchers.hex8.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            a: convertHexToDecimal(match[4]),\n            format: named ? 'name' : 'hex8',\n        };\n    }\n    match = matchers.hex6.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? 'name' : 'hex',\n        };\n    }\n    match = matchers.hex4.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1] + match[1]),\n            g: parseIntFromHex(match[2] + match[2]),\n            b: parseIntFromHex(match[3] + match[3]),\n            a: convertHexToDecimal(match[4] + match[4]),\n            format: named ? 'name' : 'hex8',\n        };\n    }\n    match = matchers.hex3.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1] + match[1]),\n            g: parseIntFromHex(match[2] + match[2]),\n            b: parseIntFromHex(match[3] + match[3]),\n            format: named ? 'name' : 'hex',\n        };\n    }\n    return false;\n}\n/**\n * Check to see if it looks like a CSS unit\n * (see `matchers` above for definition).\n */\nexport function isValidCSSUnit(color) {\n    return Boolean(matchers.CSS_UNIT.exec(String(color)));\n}\n", "import { numberInputToObject, rgbaToHex, rgbToHex, rgbToHsl, rgbToHsv } from './conversion.js';\nimport { names } from './css-color-names.js';\nimport { inputToRGB } from './format-input';\nimport { bound01, boundAlpha, clamp01 } from './util.js';\nvar TinyColor = /** @class */ (function () {\n    function TinyColor(color, opts) {\n        if (color === void 0) { color = ''; }\n        if (opts === void 0) { opts = {}; }\n        var _a;\n        // If input is already a tinycolor, return itself\n        if (color instanceof TinyColor) {\n            // eslint-disable-next-line no-constructor-return\n            return color;\n        }\n        if (typeof color === 'number') {\n            color = numberInputToObject(color);\n        }\n        this.originalInput = color;\n        var rgb = inputToRGB(color);\n        this.originalInput = color;\n        this.r = rgb.r;\n        this.g = rgb.g;\n        this.b = rgb.b;\n        this.a = rgb.a;\n        this.roundA = Math.round(100 * this.a) / 100;\n        this.format = (_a = opts.format) !== null && _a !== void 0 ? _a : rgb.format;\n        this.gradientType = opts.gradientType;\n        // Don't let the range of [0,255] come back in [0,1].\n        // Potentially lose a little bit of precision here, but will fix issues where\n        // .5 gets interpreted as half of the total, instead of half of 1\n        // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n        if (this.r < 1) {\n            this.r = Math.round(this.r);\n        }\n        if (this.g < 1) {\n            this.g = Math.round(this.g);\n        }\n        if (this.b < 1) {\n            this.b = Math.round(this.b);\n        }\n        this.isValid = rgb.ok;\n    }\n    TinyColor.prototype.isDark = function () {\n        return this.getBrightness() < 128;\n    };\n    TinyColor.prototype.isLight = function () {\n        return !this.isDark();\n    };\n    /**\n     * Returns the perceived brightness of the color, from 0-255.\n     */\n    TinyColor.prototype.getBrightness = function () {\n        // http://www.w3.org/TR/AERT#color-contrast\n        var rgb = this.toRgb();\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    };\n    /**\n     * Returns the perceived luminance of a color, from 0-1.\n     */\n    TinyColor.prototype.getLuminance = function () {\n        // http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        var rgb = this.toRgb();\n        var R;\n        var G;\n        var B;\n        var RsRGB = rgb.r / 255;\n        var GsRGB = rgb.g / 255;\n        var BsRGB = rgb.b / 255;\n        if (RsRGB <= 0.03928) {\n            R = RsRGB / 12.92;\n        }\n        else {\n            // eslint-disable-next-line prefer-exponentiation-operator\n            R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\n        }\n        if (GsRGB <= 0.03928) {\n            G = GsRGB / 12.92;\n        }\n        else {\n            // eslint-disable-next-line prefer-exponentiation-operator\n            G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\n        }\n        if (BsRGB <= 0.03928) {\n            B = BsRGB / 12.92;\n        }\n        else {\n            // eslint-disable-next-line prefer-exponentiation-operator\n            B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\n        }\n        return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n    };\n    /**\n     * Returns the alpha value of a color, from 0-1.\n     */\n    TinyColor.prototype.getAlpha = function () {\n        return this.a;\n    };\n    /**\n     * Sets the alpha value on the current color.\n     *\n     * @param alpha - The new alpha value. The accepted range is 0-1.\n     */\n    TinyColor.prototype.setAlpha = function (alpha) {\n        this.a = boundAlpha(alpha);\n        this.roundA = Math.round(100 * this.a) / 100;\n        return this;\n    };\n    /**\n     * Returns whether the color is monochrome.\n     */\n    TinyColor.prototype.isMonochrome = function () {\n        var s = this.toHsl().s;\n        return s === 0;\n    };\n    /**\n     * Returns the object as a HSVA object.\n     */\n    TinyColor.prototype.toHsv = function () {\n        var hsv = rgbToHsv(this.r, this.g, this.b);\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };\n    };\n    /**\n     * Returns the hsva values interpolated into a string with the following format:\n     * \"hsva(xxx, xxx, xxx, xx)\".\n     */\n    TinyColor.prototype.toHsvString = function () {\n        var hsv = rgbToHsv(this.r, this.g, this.b);\n        var h = Math.round(hsv.h * 360);\n        var s = Math.round(hsv.s * 100);\n        var v = Math.round(hsv.v * 100);\n        return this.a === 1 ? \"hsv(\".concat(h, \", \").concat(s, \"%, \").concat(v, \"%)\") : \"hsva(\".concat(h, \", \").concat(s, \"%, \").concat(v, \"%, \").concat(this.roundA, \")\");\n    };\n    /**\n     * Returns the object as a HSLA object.\n     */\n    TinyColor.prototype.toHsl = function () {\n        var hsl = rgbToHsl(this.r, this.g, this.b);\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };\n    };\n    /**\n     * Returns the hsla values interpolated into a string with the following format:\n     * \"hsla(xxx, xxx, xxx, xx)\".\n     */\n    TinyColor.prototype.toHslString = function () {\n        var hsl = rgbToHsl(this.r, this.g, this.b);\n        var h = Math.round(hsl.h * 360);\n        var s = Math.round(hsl.s * 100);\n        var l = Math.round(hsl.l * 100);\n        return this.a === 1 ? \"hsl(\".concat(h, \", \").concat(s, \"%, \").concat(l, \"%)\") : \"hsla(\".concat(h, \", \").concat(s, \"%, \").concat(l, \"%, \").concat(this.roundA, \")\");\n    };\n    /**\n     * Returns the hex value of the color.\n     * @param allow3Char will shorten hex value to 3 char if possible\n     */\n    TinyColor.prototype.toHex = function (allow3Char) {\n        if (allow3Char === void 0) { allow3Char = false; }\n        return rgbToHex(this.r, this.g, this.b, allow3Char);\n    };\n    /**\n     * Returns the hex value of the color -with a # prefixed.\n     * @param allow3Char will shorten hex value to 3 char if possible\n     */\n    TinyColor.prototype.toHexString = function (allow3Char) {\n        if (allow3Char === void 0) { allow3Char = false; }\n        return '#' + this.toHex(allow3Char);\n    };\n    /**\n     * Returns the hex 8 value of the color.\n     * @param allow4Char will shorten hex value to 4 char if possible\n     */\n    TinyColor.prototype.toHex8 = function (allow4Char) {\n        if (allow4Char === void 0) { allow4Char = false; }\n        return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);\n    };\n    /**\n     * Returns the hex 8 value of the color -with a # prefixed.\n     * @param allow4Char will shorten hex value to 4 char if possible\n     */\n    TinyColor.prototype.toHex8String = function (allow4Char) {\n        if (allow4Char === void 0) { allow4Char = false; }\n        return '#' + this.toHex8(allow4Char);\n    };\n    /**\n     * Returns the shorter hex value of the color depends on its alpha -with a # prefixed.\n     * @param allowShortChar will shorten hex value to 3 or 4 char if possible\n     */\n    TinyColor.prototype.toHexShortString = function (allowShortChar) {\n        if (allowShortChar === void 0) { allowShortChar = false; }\n        return this.a === 1 ? this.toHexString(allowShortChar) : this.toHex8String(allowShortChar);\n    };\n    /**\n     * Returns the object as a RGBA object.\n     */\n    TinyColor.prototype.toRgb = function () {\n        return {\n            r: Math.round(this.r),\n            g: Math.round(this.g),\n            b: Math.round(this.b),\n            a: this.a,\n        };\n    };\n    /**\n     * Returns the RGBA values interpolated into a string with the following format:\n     * \"RGBA(xxx, xxx, xxx, xx)\".\n     */\n    TinyColor.prototype.toRgbString = function () {\n        var r = Math.round(this.r);\n        var g = Math.round(this.g);\n        var b = Math.round(this.b);\n        return this.a === 1 ? \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\") : \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(this.roundA, \")\");\n    };\n    /**\n     * Returns the object as a RGBA object.\n     */\n    TinyColor.prototype.toPercentageRgb = function () {\n        var fmt = function (x) { return \"\".concat(Math.round(bound01(x, 255) * 100), \"%\"); };\n        return {\n            r: fmt(this.r),\n            g: fmt(this.g),\n            b: fmt(this.b),\n            a: this.a,\n        };\n    };\n    /**\n     * Returns the RGBA relative values interpolated into a string\n     */\n    TinyColor.prototype.toPercentageRgbString = function () {\n        var rnd = function (x) { return Math.round(bound01(x, 255) * 100); };\n        return this.a === 1\n            ? \"rgb(\".concat(rnd(this.r), \"%, \").concat(rnd(this.g), \"%, \").concat(rnd(this.b), \"%)\")\n            : \"rgba(\".concat(rnd(this.r), \"%, \").concat(rnd(this.g), \"%, \").concat(rnd(this.b), \"%, \").concat(this.roundA, \")\");\n    };\n    /**\n     * The 'real' name of the color -if there is one.\n     */\n    TinyColor.prototype.toName = function () {\n        if (this.a === 0) {\n            return 'transparent';\n        }\n        if (this.a < 1) {\n            return false;\n        }\n        var hex = '#' + rgbToHex(this.r, this.g, this.b, false);\n        for (var _i = 0, _a = Object.entries(names); _i < _a.length; _i++) {\n            var _b = _a[_i], key = _b[0], value = _b[1];\n            if (hex === value) {\n                return key;\n            }\n        }\n        return false;\n    };\n    TinyColor.prototype.toString = function (format) {\n        var formatSet = Boolean(format);\n        format = format !== null && format !== void 0 ? format : this.format;\n        var formattedString = false;\n        var hasAlpha = this.a < 1 && this.a >= 0;\n        var needsAlphaFormat = !formatSet && hasAlpha && (format.startsWith('hex') || format === 'name');\n        if (needsAlphaFormat) {\n            // Special case for \"transparent\", all other non-alpha formats\n            // will return rgba when there is transparency.\n            if (format === 'name' && this.a === 0) {\n                return this.toName();\n            }\n            return this.toRgbString();\n        }\n        if (format === 'rgb') {\n            formattedString = this.toRgbString();\n        }\n        if (format === 'prgb') {\n            formattedString = this.toPercentageRgbString();\n        }\n        if (format === 'hex' || format === 'hex6') {\n            formattedString = this.toHexString();\n        }\n        if (format === 'hex3') {\n            formattedString = this.toHexString(true);\n        }\n        if (format === 'hex4') {\n            formattedString = this.toHex8String(true);\n        }\n        if (format === 'hex8') {\n            formattedString = this.toHex8String();\n        }\n        if (format === 'name') {\n            formattedString = this.toName();\n        }\n        if (format === 'hsl') {\n            formattedString = this.toHslString();\n        }\n        if (format === 'hsv') {\n            formattedString = this.toHsvString();\n        }\n        return formattedString || this.toHexString();\n    };\n    TinyColor.prototype.toNumber = function () {\n        return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);\n    };\n    TinyColor.prototype.clone = function () {\n        return new TinyColor(this.toString());\n    };\n    /**\n     * Lighten the color a given amount. Providing 100 will always return white.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.lighten = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var hsl = this.toHsl();\n        hsl.l += amount / 100;\n        hsl.l = clamp01(hsl.l);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Brighten the color a given amount, from 0 to 100.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.brighten = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var rgb = this.toRgb();\n        rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\n        rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\n        rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\n        return new TinyColor(rgb);\n    };\n    /**\n     * Darken the color a given amount, from 0 to 100.\n     * Providing 100 will always return black.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.darken = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var hsl = this.toHsl();\n        hsl.l -= amount / 100;\n        hsl.l = clamp01(hsl.l);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Mix the color with pure white, from 0 to 100.\n     * Providing 0 will do nothing, providing 100 will always return white.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.tint = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        return this.mix('white', amount);\n    };\n    /**\n     * Mix the color with pure black, from 0 to 100.\n     * Providing 0 will do nothing, providing 100 will always return black.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.shade = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        return this.mix('black', amount);\n    };\n    /**\n     * Desaturate the color a given amount, from 0 to 100.\n     * Providing 100 will is the same as calling greyscale\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.desaturate = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var hsl = this.toHsl();\n        hsl.s -= amount / 100;\n        hsl.s = clamp01(hsl.s);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Saturate the color a given amount, from 0 to 100.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.saturate = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var hsl = this.toHsl();\n        hsl.s += amount / 100;\n        hsl.s = clamp01(hsl.s);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Completely desaturates a color into greyscale.\n     * Same as calling `desaturate(100)`\n     */\n    TinyColor.prototype.greyscale = function () {\n        return this.desaturate(100);\n    };\n    /**\n     * Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n     * Values outside of this range will be wrapped into this range.\n     */\n    TinyColor.prototype.spin = function (amount) {\n        var hsl = this.toHsl();\n        var hue = (hsl.h + amount) % 360;\n        hsl.h = hue < 0 ? 360 + hue : hue;\n        return new TinyColor(hsl);\n    };\n    /**\n     * Mix the current color a given amount with another color, from 0 to 100.\n     * 0 means no mixing (return current color).\n     */\n    TinyColor.prototype.mix = function (color, amount) {\n        if (amount === void 0) { amount = 50; }\n        var rgb1 = this.toRgb();\n        var rgb2 = new TinyColor(color).toRgb();\n        var p = amount / 100;\n        var rgba = {\n            r: (rgb2.r - rgb1.r) * p + rgb1.r,\n            g: (rgb2.g - rgb1.g) * p + rgb1.g,\n            b: (rgb2.b - rgb1.b) * p + rgb1.b,\n            a: (rgb2.a - rgb1.a) * p + rgb1.a,\n        };\n        return new TinyColor(rgba);\n    };\n    TinyColor.prototype.analogous = function (results, slices) {\n        if (results === void 0) { results = 6; }\n        if (slices === void 0) { slices = 30; }\n        var hsl = this.toHsl();\n        var part = 360 / slices;\n        var ret = [this];\n        for (hsl.h = (hsl.h - ((part * results) >> 1) + 720) % 360; --results;) {\n            hsl.h = (hsl.h + part) % 360;\n            ret.push(new TinyColor(hsl));\n        }\n        return ret;\n    };\n    /**\n     * taken from https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js\n     */\n    TinyColor.prototype.complement = function () {\n        var hsl = this.toHsl();\n        hsl.h = (hsl.h + 180) % 360;\n        return new TinyColor(hsl);\n    };\n    TinyColor.prototype.monochromatic = function (results) {\n        if (results === void 0) { results = 6; }\n        var hsv = this.toHsv();\n        var h = hsv.h;\n        var s = hsv.s;\n        var v = hsv.v;\n        var res = [];\n        var modification = 1 / results;\n        while (results--) {\n            res.push(new TinyColor({ h: h, s: s, v: v }));\n            v = (v + modification) % 1;\n        }\n        return res;\n    };\n    TinyColor.prototype.splitcomplement = function () {\n        var hsl = this.toHsl();\n        var h = hsl.h;\n        return [\n            this,\n            new TinyColor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }),\n            new TinyColor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l }),\n        ];\n    };\n    /**\n     * Compute how the color would appear on a background\n     */\n    TinyColor.prototype.onBackground = function (background) {\n        var fg = this.toRgb();\n        var bg = new TinyColor(background).toRgb();\n        var alpha = fg.a + bg.a * (1 - fg.a);\n        return new TinyColor({\n            r: (fg.r * fg.a + bg.r * bg.a * (1 - fg.a)) / alpha,\n            g: (fg.g * fg.a + bg.g * bg.a * (1 - fg.a)) / alpha,\n            b: (fg.b * fg.a + bg.b * bg.a * (1 - fg.a)) / alpha,\n            a: alpha,\n        });\n    };\n    /**\n     * Alias for `polyad(3)`\n     */\n    TinyColor.prototype.triad = function () {\n        return this.polyad(3);\n    };\n    /**\n     * Alias for `polyad(4)`\n     */\n    TinyColor.prototype.tetrad = function () {\n        return this.polyad(4);\n    };\n    /**\n     * Get polyad colors, like (for 1, 2, 3, 4, 5, 6, 7, 8, etc...)\n     * monad, dyad, triad, tetrad, pentad, hexad, heptad, octad, etc...\n     */\n    TinyColor.prototype.polyad = function (n) {\n        var hsl = this.toHsl();\n        var h = hsl.h;\n        var result = [this];\n        var increment = 360 / n;\n        for (var i = 1; i < n; i++) {\n            result.push(new TinyColor({ h: (h + i * increment) % 360, s: hsl.s, l: hsl.l }));\n        }\n        return result;\n    };\n    /**\n     * compare color vs current color\n     */\n    TinyColor.prototype.equals = function (color) {\n        return this.toRgbString() === new TinyColor(color).toRgbString();\n    };\n    return TinyColor;\n}());\nexport { TinyColor };\n// kept for backwards compatability with v1\nexport function tinycolor(color, opts) {\n    if (color === void 0) { color = ''; }\n    if (opts === void 0) { opts = {}; }\n    return new TinyColor(color, opts);\n}\n", "import { TinyColor } from './index.js';\n// Readability Functions\n// ---------------------\n// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n/**\n * AKA `contrast`\n *\n * Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\n */\nexport function readability(color1, color2) {\n    var c1 = new TinyColor(color1);\n    var c2 = new TinyColor(color2);\n    return ((Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) /\n        (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05));\n}\n/**\n * Ensure that foreground and background color combinations meet WCAG2 guidelines.\n * The third argument is an object.\n *      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n *      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n * If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n *\n * Example\n * ```ts\n * new TinyColor().isReadable('#000', '#111') => false\n * new TinyColor().isReadable('#000', '#111', { level: 'AA', size: 'large' }) => false\n * ```\n */\nexport function isReadable(color1, color2, wcag2) {\n    var _a, _b;\n    if (wcag2 === void 0) { wcag2 = { level: 'AA', size: 'small' }; }\n    var readabilityLevel = readability(color1, color2);\n    switch (((_a = wcag2.level) !== null && _a !== void 0 ? _a : 'AA') + ((_b = wcag2.size) !== null && _b !== void 0 ? _b : 'small')) {\n        case 'AAsmall':\n        case 'AAAlarge':\n            return readabilityLevel >= 4.5;\n        case 'AAlarge':\n            return readabilityLevel >= 3;\n        case 'AAAsmall':\n            return readabilityLevel >= 7;\n        default:\n            return false;\n    }\n}\n/**\n * Given a base color and a list of possible foreground or background\n * colors for that base, returns the most readable color.\n * Optionally returns Black or White if the most readable color is unreadable.\n *\n * @param baseColor - the base color.\n * @param colorList - array of colors to pick the most readable one from.\n * @param args - and object with extra arguments\n *\n * Example\n * ```ts\n * new TinyColor().mostReadable('#123', ['#124\", \"#125'], { includeFallbackColors: false }).toHexString(); // \"#112255\"\n * new TinyColor().mostReadable('#123', ['#124\", \"#125'],{ includeFallbackColors: true }).toHexString();  // \"#ffffff\"\n * new TinyColor().mostReadable('#a8015a', [\"#faf3f3\"], { includeFallbackColors:true, level: 'AAA', size: 'large' }).toHexString(); // \"#faf3f3\"\n * new TinyColor().mostReadable('#a8015a', [\"#faf3f3\"], { includeFallbackColors:true, level: 'AAA', size: 'small' }).toHexString(); // \"#ffffff\"\n * ```\n */\nexport function mostReadable(baseColor, colorList, args) {\n    if (args === void 0) { args = { includeFallbackColors: false, level: 'AA', size: 'small' }; }\n    var bestColor = null;\n    var bestScore = 0;\n    var includeFallbackColors = args.includeFallbackColors, level = args.level, size = args.size;\n    for (var _i = 0, colorList_1 = colorList; _i < colorList_1.length; _i++) {\n        var color = colorList_1[_i];\n        var score = readability(baseColor, color);\n        if (score > bestScore) {\n            bestScore = score;\n            bestColor = new TinyColor(color);\n        }\n    }\n    if (isReadable(baseColor, bestColor, { level: level, size: size }) || !includeFallbackColors) {\n        return bestColor;\n    }\n    args.includeFallbackColors = false;\n    return mostReadable(baseColor, ['#fff', '#000'], args);\n}\n", "/* eslint-disable @typescript-eslint/no-redundant-type-constituents */\n// randomColor by David Merfield under the CC0 license\n// https://github.com/davidmerfield/randomColor/\nimport { TinyColor } from './index.js';\nexport function random(options) {\n    if (options === void 0) { options = {}; }\n    // Check if we need to generate multiple colors\n    if (options.count !== undefined &&\n        options.count !== null) {\n        var totalColors = options.count;\n        var colors = [];\n        options.count = undefined;\n        while (totalColors > colors.length) {\n            // Since we're generating multiple colors,\n            // incremement the seed. Otherwise we'd just\n            // generate the same color each time...\n            options.count = null;\n            if (options.seed) {\n                options.seed += 1;\n            }\n            colors.push(random(options));\n        }\n        options.count = totalColors;\n        return colors;\n    }\n    // First we pick a hue (H)\n    var h = pickHue(options.hue, options.seed);\n    // Then use H to determine saturation (S)\n    var s = pickSaturation(h, options);\n    // Then use S and H to determine brightness (B).\n    var v = pickBrightness(h, s, options);\n    var res = { h: h, s: s, v: v };\n    if (options.alpha !== undefined) {\n        res.a = options.alpha;\n    }\n    // Then we return the HSB color in the desired format\n    return new TinyColor(res);\n}\nfunction pickHue(hue, seed) {\n    var hueRange = getHueRange(hue);\n    var res = randomWithin(hueRange, seed);\n    // Instead of storing red as two seperate ranges,\n    // we group them, using negative numbers\n    if (res < 0) {\n        res = 360 + res;\n    }\n    return res;\n}\nfunction pickSaturation(hue, options) {\n    if (options.hue === 'monochrome') {\n        return 0;\n    }\n    if (options.luminosity === 'random') {\n        return randomWithin([0, 100], options.seed);\n    }\n    var saturationRange = getColorInfo(hue).saturationRange;\n    var sMin = saturationRange[0];\n    var sMax = saturationRange[1];\n    switch (options.luminosity) {\n        case 'bright':\n            sMin = 55;\n            break;\n        case 'dark':\n            sMin = sMax - 10;\n            break;\n        case 'light':\n            sMax = 55;\n            break;\n        default:\n            break;\n    }\n    return randomWithin([sMin, sMax], options.seed);\n}\nfunction pickBrightness(H, S, options) {\n    var bMin = getMinimumBrightness(H, S);\n    var bMax = 100;\n    switch (options.luminosity) {\n        case 'dark':\n            bMax = bMin + 20;\n            break;\n        case 'light':\n            bMin = (bMax + bMin) / 2;\n            break;\n        case 'random':\n            bMin = 0;\n            bMax = 100;\n            break;\n        default:\n            break;\n    }\n    return randomWithin([bMin, bMax], options.seed);\n}\nfunction getMinimumBrightness(H, S) {\n    var lowerBounds = getColorInfo(H).lowerBounds;\n    for (var i = 0; i < lowerBounds.length - 1; i++) {\n        var s1 = lowerBounds[i][0];\n        var v1 = lowerBounds[i][1];\n        var s2 = lowerBounds[i + 1][0];\n        var v2 = lowerBounds[i + 1][1];\n        if (S >= s1 && S <= s2) {\n            var m = (v2 - v1) / (s2 - s1);\n            var b = v1 - m * s1;\n            return m * S + b;\n        }\n    }\n    return 0;\n}\nfunction getHueRange(colorInput) {\n    var num = parseInt(colorInput, 10);\n    if (!Number.isNaN(num) && num < 360 && num > 0) {\n        return [num, num];\n    }\n    if (typeof colorInput === 'string') {\n        var namedColor = bounds.find(function (n) { return n.name === colorInput; });\n        if (namedColor) {\n            var color = defineColor(namedColor);\n            if (color.hueRange) {\n                return color.hueRange;\n            }\n        }\n        var parsed = new TinyColor(colorInput);\n        if (parsed.isValid) {\n            var hue = parsed.toHsv().h;\n            return [hue, hue];\n        }\n    }\n    return [0, 360];\n}\nfunction getColorInfo(hue) {\n    // Maps red colors to make picking hue easier\n    if (hue >= 334 && hue <= 360) {\n        hue -= 360;\n    }\n    for (var _i = 0, bounds_1 = bounds; _i < bounds_1.length; _i++) {\n        var bound = bounds_1[_i];\n        var color = defineColor(bound);\n        if (color.hueRange && hue >= color.hueRange[0] && hue <= color.hueRange[1]) {\n            return color;\n        }\n    }\n    throw Error('Color not found');\n}\nfunction randomWithin(range, seed) {\n    if (seed === undefined) {\n        return Math.floor(range[0] + Math.random() * (range[1] + 1 - range[0]));\n    }\n    // Seeded random algorithm from http://indiegamr.com/generate-repeatable-random-numbers-in-js/\n    var max = range[1] || 1;\n    var min = range[0] || 0;\n    seed = (seed * 9301 + 49297) % 233280;\n    var rnd = seed / 233280.0;\n    return Math.floor(min + rnd * (max - min));\n}\nfunction defineColor(bound) {\n    var sMin = bound.lowerBounds[0][0];\n    var sMax = bound.lowerBounds[bound.lowerBounds.length - 1][0];\n    var bMin = bound.lowerBounds[bound.lowerBounds.length - 1][1];\n    var bMax = bound.lowerBounds[0][1];\n    return {\n        name: bound.name,\n        hueRange: bound.hueRange,\n        lowerBounds: bound.lowerBounds,\n        saturationRange: [sMin, sMax],\n        brightnessRange: [bMin, bMax],\n    };\n}\n/**\n * @hidden\n */\nexport var bounds = [\n    {\n        name: 'monochrome',\n        hueRange: null,\n        lowerBounds: [\n            [0, 0],\n            [100, 0],\n        ],\n    },\n    {\n        name: 'red',\n        hueRange: [-26, 18],\n        lowerBounds: [\n            [20, 100],\n            [30, 92],\n            [40, 89],\n            [50, 85],\n            [60, 78],\n            [70, 70],\n            [80, 60],\n            [90, 55],\n            [100, 50],\n        ],\n    },\n    {\n        name: 'orange',\n        hueRange: [19, 46],\n        lowerBounds: [\n            [20, 100],\n            [30, 93],\n            [40, 88],\n            [50, 86],\n            [60, 85],\n            [70, 70],\n            [100, 70],\n        ],\n    },\n    {\n        name: 'yellow',\n        hueRange: [47, 62],\n        lowerBounds: [\n            [25, 100],\n            [40, 94],\n            [50, 89],\n            [60, 86],\n            [70, 84],\n            [80, 82],\n            [90, 80],\n            [100, 75],\n        ],\n    },\n    {\n        name: 'green',\n        hueRange: [63, 178],\n        lowerBounds: [\n            [30, 100],\n            [40, 90],\n            [50, 85],\n            [60, 81],\n            [70, 74],\n            [80, 64],\n            [90, 50],\n            [100, 40],\n        ],\n    },\n    {\n        name: 'blue',\n        hueRange: [179, 257],\n        lowerBounds: [\n            [20, 100],\n            [30, 86],\n            [40, 80],\n            [50, 74],\n            [60, 60],\n            [70, 52],\n            [80, 44],\n            [90, 39],\n            [100, 35],\n        ],\n    },\n    {\n        name: 'purple',\n        hueRange: [258, 282],\n        lowerBounds: [\n            [20, 100],\n            [30, 87],\n            [40, 79],\n            [50, 70],\n            [60, 65],\n            [70, 59],\n            [80, 52],\n            [90, 45],\n            [100, 42],\n        ],\n    },\n    {\n        name: 'pink',\n        hueRange: [283, 334],\n        lowerBounds: [\n            [20, 100],\n            [30, 90],\n            [40, 86],\n            [60, 84],\n            [80, 80],\n            [90, 75],\n            [100, 73],\n        ],\n    },\n];\n", "import { TinyColor, readability, isReadable, random } from '@ctrl/tinycolor';\nimport { memoizedGet, isEmptyObject, warn, fromEntries, isObject } from '@chakra-ui/utils';\nexport { runIfFn } from '@chakra-ui/utils';\n\n/**\n * Get the color raw value from theme\n * @param theme - the theme object\n * @param color - the color path (\"green.200\")\n * @param fallback - the fallback color\n */\n\nvar getColor = function getColor(theme, color, fallback) {\n  var hex = memoizedGet(theme, \"colors.\" + color, color);\n\n  var _TinyColor = new TinyColor(hex),\n      isValid = _TinyColor.isValid;\n\n  return isValid ? hex : fallback;\n};\n/**\n * Determines if the tone of given color is \"light\" or \"dark\"\n * @param color - the color in hex, rgb, or hsl\n */\n\nvar tone = function tone(color) {\n  return function (theme) {\n    var hex = getColor(theme, color);\n    var isDark = new TinyColor(hex).isDark();\n    return isDark ? \"dark\" : \"light\";\n  };\n};\n/**\n * Determines if a color tone is \"dark\"\n * @param color - the color in hex, rgb, or hsl\n */\n\nvar isDark = function isDark(color) {\n  return function (theme) {\n    return tone(color)(theme) === \"dark\";\n  };\n};\n/**\n * Determines if a color tone is \"light\"\n * @param color - the color in hex, rgb, or hsl\n */\n\nvar isLight = function isLight(color) {\n  return function (theme) {\n    return tone(color)(theme) === \"light\";\n  };\n};\n/**\n * Make a color transparent\n * @param color - the color in hex, rgb, or hsl\n * @param opacity - the amount of opacity the color should have (0-1)\n */\n\nvar transparentize = function transparentize(color, opacity) {\n  return function (theme) {\n    var raw = getColor(theme, color);\n    return new TinyColor(raw).setAlpha(opacity).toRgbString();\n  };\n};\n/**\n * Add white to a color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount white to add (0-100)\n */\n\nvar whiten = function whiten(color, amount) {\n  return function (theme) {\n    var raw = getColor(theme, color);\n    return new TinyColor(raw).mix(\"#fff\", amount).toHexString();\n  };\n};\n/**\n * Add black to a color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount black to add (0-100)\n */\n\nvar blacken = function blacken(color, amount) {\n  return function (theme) {\n    var raw = getColor(theme, color);\n    return new TinyColor(raw).mix(\"#000\", amount).toHexString();\n  };\n};\n/**\n * Darken a specified color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount to darken (0-100)\n */\n\nvar darken = function darken(color, amount) {\n  return function (theme) {\n    var raw = getColor(theme, color);\n    return new TinyColor(raw).darken(amount).toHexString();\n  };\n};\n/**\n * Lighten a specified color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount to lighten (0-100)\n */\n\nvar lighten = function lighten(color, amount) {\n  return function (theme) {\n    return new TinyColor(getColor(theme, color)).lighten(amount).toHexString();\n  };\n};\n/**\n * Checks the contract ratio of between 2 colors,\n * based on the Web Content Accessibility Guidelines (Version 2.0).\n *\n * @param fg - the foreground or text color\n * @param bg - the background color\n */\n\nvar contrast = function contrast(fg, bg) {\n  return function (theme) {\n    return readability(getColor(theme, bg), getColor(theme, fg));\n  };\n};\n/**\n * Checks if a color meets the Web Content Accessibility\n * Guidelines (Version 2.0) for constract ratio.\n *\n * @param fg - the foreground or text color\n * @param bg - the background color\n */\n\nvar isAccessible = function isAccessible(textColor, bgColor, options) {\n  return function (theme) {\n    return isReadable(getColor(theme, bgColor), getColor(theme, textColor), options);\n  };\n};\nvar complementary = function complementary(color) {\n  return function (theme) {\n    return new TinyColor(getColor(theme, color)).complement().toHexString();\n  };\n};\nfunction generateStripe(size, color) {\n  if (size === void 0) {\n    size = \"1rem\";\n  }\n\n  if (color === void 0) {\n    color = \"rgba(255, 255, 255, 0.15)\";\n  }\n\n  return {\n    backgroundImage: \"linear-gradient(\\n    45deg,\\n    \" + color + \" 25%,\\n    transparent 25%,\\n    transparent 50%,\\n    \" + color + \" 50%,\\n    \" + color + \" 75%,\\n    transparent 75%,\\n    transparent\\n  )\",\n    backgroundSize: size + \" \" + size\n  };\n}\nfunction randomColor(opts) {\n  var fallback = random().toHexString();\n\n  if (!opts || isEmptyObject(opts)) {\n    return fallback;\n  }\n\n  if (opts.string && opts.colors) {\n    return randomColorFromList(opts.string, opts.colors);\n  }\n\n  if (opts.string && !opts.colors) {\n    return randomColorFromString(opts.string);\n  }\n\n  if (opts.colors && !opts.string) {\n    return randomFromList(opts.colors);\n  }\n\n  return fallback;\n}\n\nfunction randomColorFromString(str) {\n  var hash = 0;\n  if (str.length === 0) return hash.toString();\n\n  for (var i = 0; i < str.length; i += 1) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    hash = hash & hash;\n  }\n\n  var color = \"#\";\n\n  for (var j = 0; j < 3; j += 1) {\n    var value = hash >> j * 8 & 255;\n    color += (\"00\" + value.toString(16)).substr(-2);\n  }\n\n  return color;\n}\n\nfunction randomColorFromList(str, list) {\n  var index = 0;\n  if (str.length === 0) return list[0];\n\n  for (var i = 0; i < str.length; i += 1) {\n    index = str.charCodeAt(i) + ((index << 5) - index);\n    index = index & index;\n  }\n\n  index = (index % list.length + list.length) % list.length;\n  return list[index];\n}\n\nfunction randomFromList(list) {\n  return list[Math.floor(Math.random() * list.length)];\n}\n\nfunction mode(light, dark) {\n  return function (props) {\n    return props.colorMode === \"dark\" ? dark : light;\n  };\n}\nfunction orient(options) {\n  var orientation = options.orientation,\n      vertical = options.vertical,\n      horizontal = options.horizontal;\n  if (!orientation) return {};\n  return orientation === \"vertical\" ? vertical : horizontal;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar createBreakpoints = function createBreakpoints(config) {\n  warn({\n    condition: true,\n    message: [\"[chakra-ui]: createBreakpoints(...) will be deprecated pretty soon\", \"simply pass the breakpoints as an object. Remove the createBreakpoint(..) call\"].join(\"\")\n  });\n  return _extends({\n    base: \"0em\"\n  }, config);\n};\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\n/**\n * Used to define the anatomy/parts of a component in a way that provides\n * a consistent API for `className`, css selector and `theming`.\n */\n\nvar Anatomy = /*#__PURE__*/function () {\n  function Anatomy(name) {\n    var _this = this;\n\n    this.map = {};\n    this.called = false;\n\n    this.assert = function () {\n      if (!_this.called) {\n        _this.called = true;\n        return;\n      }\n\n      throw new Error(\"[anatomy] .part(...) should only be called once. Did you mean to use .extend(...) ?\");\n    };\n\n    this.parts = function () {\n      _this.assert();\n\n      for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n        values[_key] = arguments[_key];\n      }\n\n      for (var _i = 0, _values = values; _i < _values.length; _i++) {\n        var part = _values[_i];\n        _this.map[part] = _this.toPart(part);\n      }\n\n      return _this;\n    };\n\n    this.extend = function () {\n      for (var _len2 = arguments.length, parts = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        parts[_key2] = arguments[_key2];\n      }\n\n      for (var _i2 = 0, _parts = parts; _i2 < _parts.length; _i2++) {\n        var part = _parts[_i2];\n        if (part in _this.map) continue;\n        _this.map[part] = _this.toPart(part);\n      }\n\n      return _this;\n    };\n\n    this.toPart = function (part) {\n      var el = [\"container\", \"root\"].includes(part != null ? part : \"\") ? [_this.name] : [_this.name, part];\n      var attr = el.filter(Boolean).join(\"__\");\n      var className = \"chakra-\" + attr;\n      var partObj = {\n        className: className,\n        selector: \".\" + className,\n        toString: function toString() {\n          return part;\n        }\n      };\n      return partObj;\n    };\n\n    this.__type = {};\n  }\n  /**\n   * Prevents user from calling `.parts` multiple times.\n   * It should only be called once.\n   */\n\n\n  _createClass(Anatomy, [{\n    key: \"selectors\",\n    get:\n    /**\n     * Get all selectors for the component anatomy\n     */\n    function get() {\n      var value = fromEntries(Object.entries(this.map).map(function (_ref) {\n        var key = _ref[0],\n            part = _ref[1];\n        return [key, part.selector];\n      }));\n      return value;\n    }\n    /**\n     * Get all classNames for the component anatomy\n     */\n\n  }, {\n    key: \"classNames\",\n    get: function get() {\n      var value = fromEntries(Object.entries(this.map).map(function (_ref2) {\n        var key = _ref2[0],\n            part = _ref2[1];\n        return [key, part.className];\n      }));\n      return value;\n    }\n    /**\n     * Get all parts as array of string\n     */\n\n  }, {\n    key: \"keys\",\n    get: function get() {\n      return Object.keys(this.map);\n    }\n    /**\n     * Creates the part object for the given part\n     */\n\n  }]);\n\n  return Anatomy;\n}();\nfunction anatomy(name) {\n  return new Anatomy(name);\n}\n\nfunction toRef(operand) {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference;\n  }\n\n  return String(operand);\n}\n\nvar toExpr = function toExpr(operator) {\n  for (var _len = arguments.length, operands = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    operands[_key - 1] = arguments[_key];\n  }\n\n  return operands.map(toRef).join(\" \" + operator + \" \").replace(/calc/g, \"\");\n};\n\nvar _add = function add() {\n  for (var _len2 = arguments.length, operands = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    operands[_key2] = arguments[_key2];\n  }\n\n  return \"calc(\" + toExpr.apply(void 0, [\"+\"].concat(operands)) + \")\";\n};\n\nvar _subtract = function subtract() {\n  for (var _len3 = arguments.length, operands = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    operands[_key3] = arguments[_key3];\n  }\n\n  return \"calc(\" + toExpr.apply(void 0, [\"-\"].concat(operands)) + \")\";\n};\n\nvar _multiply = function multiply() {\n  for (var _len4 = arguments.length, operands = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    operands[_key4] = arguments[_key4];\n  }\n\n  return \"calc(\" + toExpr.apply(void 0, [\"*\"].concat(operands)) + \")\";\n};\n\nvar _divide = function divide() {\n  for (var _len5 = arguments.length, operands = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    operands[_key5] = arguments[_key5];\n  }\n\n  return \"calc(\" + toExpr.apply(void 0, [\"/\"].concat(operands)) + \")\";\n};\n\nvar _negate = function negate(x) {\n  var value = toRef(x);\n\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : \"-\" + value;\n  }\n\n  return _multiply(value, -1);\n};\n\nvar calc = Object.assign(function (x) {\n  return {\n    add: function add() {\n      for (var _len6 = arguments.length, operands = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        operands[_key6] = arguments[_key6];\n      }\n\n      return calc(_add.apply(void 0, [x].concat(operands)));\n    },\n    subtract: function subtract() {\n      for (var _len7 = arguments.length, operands = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        operands[_key7] = arguments[_key7];\n      }\n\n      return calc(_subtract.apply(void 0, [x].concat(operands)));\n    },\n    multiply: function multiply() {\n      for (var _len8 = arguments.length, operands = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        operands[_key8] = arguments[_key8];\n      }\n\n      return calc(_multiply.apply(void 0, [x].concat(operands)));\n    },\n    divide: function divide() {\n      for (var _len9 = arguments.length, operands = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n        operands[_key9] = arguments[_key9];\n      }\n\n      return calc(_divide.apply(void 0, [x].concat(operands)));\n    },\n    negate: function negate() {\n      return calc(_negate(x));\n    },\n    toString: function toString() {\n      return x.toString();\n    }\n  };\n}, {\n  add: _add,\n  subtract: _subtract,\n  multiply: _multiply,\n  divide: _divide,\n  negate: _negate\n});\n\nfunction isDecimal(value) {\n  return !Number.isInteger(parseFloat(value.toString()));\n}\n\nfunction replaceWhiteSpace(value, replaceValue) {\n  if (replaceValue === void 0) {\n    replaceValue = \"-\";\n  }\n\n  return value.replace(/\\s+/g, replaceValue);\n}\n\nfunction escape(value) {\n  var valueStr = replaceWhiteSpace(value.toString());\n  if (valueStr.includes(\"\\\\.\")) return value;\n  return isDecimal(value) ? valueStr.replace(\".\", \"\\\\.\") : value;\n}\n\nfunction addPrefix(value, prefix) {\n  if (prefix === void 0) {\n    prefix = \"\";\n  }\n\n  return [prefix, escape(value)].filter(Boolean).join(\"-\");\n}\nfunction toVarRef(name, fallback) {\n  return \"var(\" + escape(name) + (fallback ? \", \" + fallback : \"\") + \")\";\n}\nfunction toVar(value, prefix) {\n  if (prefix === void 0) {\n    prefix = \"\";\n  }\n\n  return \"--\" + addPrefix(value, prefix);\n}\nfunction cssVar(name, options) {\n  var cssVariable = toVar(name, options == null ? void 0 : options.prefix);\n  return {\n    variable: cssVariable,\n    reference: toVarRef(cssVariable, getFallback(options == null ? void 0 : options.fallback))\n  };\n}\n\nfunction getFallback(fallback) {\n  if (typeof fallback === \"string\") return fallback;\n  return fallback == null ? void 0 : fallback.reference;\n}\n\nexport { Anatomy, addPrefix, anatomy, blacken, calc, complementary, contrast, createBreakpoints, cssVar, darken, generateStripe, getColor, isAccessible, isDark, isDecimal, isLight, lighten, mode, orient, randomColor, toVar, toVarRef, tone, transparentize, whiten };\n"],
  "mappings": "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",
  "names": ["TinyColor", "getColor", "tone", "isDark", "isLight", "transparentize", "whiten", "blacken", "darken", "lighten", "contrast", "isAccessible", "complementary", "createBreakpoints", "Anatomy", "toExpr", "add", "subtract", "multiply", "divide", "negate"]
}
