import {
  useBoolean,
  useId
} from "./chunk-GXV35NTJ.js";
import {
  Icon$1
} from "./chunk-CIHCUYTB.js";
import {
  StylesProvider,
  chakra,
  createContext,
  forwardRef,
  getValidChildren,
  mergeRefs,
  omitThemingProps,
  useMultiStyleConfig,
  useStyleConfig,
  useStyles
} from "./chunk-54BX3RT7.js";
import {
  __DEV__,
  ariaAttr,
  callAllHandlers,
  cx,
  dataAttr,
  filterUndefined
} from "./chunk-6NVFBBHT.js";
import {
  require_react
} from "./chunk-IXG3QTAX.js";
import {
  __toESM
} from "./chunk-J43GMYXM.js";

// node_modules/@chakra-ui/form-control/dist/chakra-ui-form-control.esm.js
var React = __toESM(require_react());
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$2 = ["id", "isRequired", "isInvalid", "isDisabled", "isReadOnly"];
var _excluded2$1 = ["getRootProps", "htmlProps"];
var _createContext = createContext({
  strict: false,
  name: "FormControlContext"
});
var FormControlProvider = _createContext[0];
var useFormControlContext = _createContext[1];
function useFormControlProvider(props) {
  var idProp = props.id, isRequired = props.isRequired, isInvalid = props.isInvalid, isDisabled = props.isDisabled, isReadOnly = props.isReadOnly, htmlProps = _objectWithoutPropertiesLoose(props, _excluded$2);
  var uuid = useId();
  var id = idProp || "field-" + uuid;
  var labelId = id + "-label";
  var feedbackId = id + "-feedback";
  var helpTextId = id + "-helptext";
  var _React$useState = React.useState(false), hasFeedbackText = _React$useState[0], setHasFeedbackText = _React$useState[1];
  var _React$useState2 = React.useState(false), hasHelpText = _React$useState2[0], setHasHelpText = _React$useState2[1];
  var _useBoolean = useBoolean(), isFocused = _useBoolean[0], setFocus = _useBoolean[1];
  var getHelpTextProps = React.useCallback(function(props2, forwardedRef) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    return _extends({
      id: helpTextId
    }, props2, {
      ref: mergeRefs(forwardedRef, function(node) {
        if (!node)
          return;
        setHasHelpText(true);
      })
    });
  }, [helpTextId]);
  var getLabelProps = React.useCallback(function(props2, forwardedRef) {
    var _props$id, _props$htmlFor;
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    return _extends({}, props2, {
      ref: forwardedRef,
      "data-focus": dataAttr(isFocused),
      "data-disabled": dataAttr(isDisabled),
      "data-invalid": dataAttr(isInvalid),
      "data-readonly": dataAttr(isReadOnly),
      id: (_props$id = props2.id) != null ? _props$id : labelId,
      htmlFor: (_props$htmlFor = props2.htmlFor) != null ? _props$htmlFor : id
    });
  }, [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId]);
  var getErrorMessageProps = React.useCallback(function(props2, forwardedRef) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    return _extends({
      id: feedbackId
    }, props2, {
      ref: mergeRefs(forwardedRef, function(node) {
        if (!node)
          return;
        setHasFeedbackText(true);
      }),
      "aria-live": "polite"
    });
  }, [feedbackId]);
  var getRootProps = React.useCallback(function(props2, forwardedRef) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    return _extends({}, props2, htmlProps, {
      ref: forwardedRef,
      role: "group"
    });
  }, [htmlProps]);
  var getRequiredIndicatorProps = React.useCallback(function(props2, forwardedRef) {
    if (props2 === void 0) {
      props2 = {};
    }
    if (forwardedRef === void 0) {
      forwardedRef = null;
    }
    return _extends({}, props2, {
      ref: forwardedRef,
      role: "presentation",
      "aria-hidden": true,
      children: props2.children || "*"
    });
  }, []);
  return {
    isRequired: !!isRequired,
    isInvalid: !!isInvalid,
    isReadOnly: !!isReadOnly,
    isDisabled: !!isDisabled,
    isFocused: !!isFocused,
    onFocus: setFocus.on,
    onBlur: setFocus.off,
    hasFeedbackText,
    setHasFeedbackText,
    hasHelpText,
    setHasHelpText,
    id,
    labelId,
    feedbackId,
    helpTextId,
    htmlProps,
    getHelpTextProps,
    getErrorMessageProps,
    getRootProps,
    getLabelProps,
    getRequiredIndicatorProps
  };
}
var FormControl = forwardRef(function(props, ref) {
  var styles = useMultiStyleConfig("Form", props);
  var ownProps = omitThemingProps(props);
  var _useFormControlProvid = useFormControlProvider(ownProps), getRootProps = _useFormControlProvid.getRootProps;
  _useFormControlProvid.htmlProps;
  var context = _objectWithoutPropertiesLoose(_useFormControlProvid, _excluded2$1);
  var className = cx("chakra-form-control", props.className);
  return React.createElement(FormControlProvider, {
    value: context
  }, React.createElement(StylesProvider, {
    value: styles
  }, React.createElement(chakra.div, _extends({}, getRootProps({}, ref), {
    className,
    __css: styles["container"]
  }))));
});
if (__DEV__) {
  FormControl.displayName = "FormControl";
}
var FormHelperText = forwardRef(function(props, ref) {
  var field = useFormControlContext();
  var styles = useStyles();
  var className = cx("chakra-form__helper-text", props.className);
  return React.createElement(chakra.div, _extends({}, field == null ? void 0 : field.getHelpTextProps(props, ref), {
    __css: styles.helperText,
    className
  }));
});
if (__DEV__) {
  FormHelperText.displayName = "FormHelperText";
}
var _excluded$1 = ["isDisabled", "isInvalid", "isReadOnly", "isRequired"];
var _excluded2 = ["id", "disabled", "readOnly", "required", "isRequired", "isInvalid", "isReadOnly", "isDisabled", "onFocus", "onBlur"];
function useFormControl(props) {
  var _useFormControlProps = useFormControlProps(props), isDisabled = _useFormControlProps.isDisabled, isInvalid = _useFormControlProps.isInvalid, isReadOnly = _useFormControlProps.isReadOnly, isRequired = _useFormControlProps.isRequired, rest = _objectWithoutPropertiesLoose(_useFormControlProps, _excluded$1);
  return _extends({}, rest, {
    disabled: isDisabled,
    readOnly: isReadOnly,
    required: isRequired,
    "aria-invalid": ariaAttr(isInvalid),
    "aria-required": ariaAttr(isRequired),
    "aria-readonly": ariaAttr(isReadOnly)
  });
}
function useFormControlProps(props) {
  var _ref, _ref2, _ref3;
  var field = useFormControlContext();
  var id = props.id, disabled = props.disabled, readOnly = props.readOnly, required = props.required, isRequired = props.isRequired, isInvalid = props.isInvalid, isReadOnly = props.isReadOnly, isDisabled = props.isDisabled, onFocus = props.onFocus, onBlur = props.onBlur, rest = _objectWithoutPropertiesLoose(props, _excluded2);
  var labelIds = props["aria-describedby"] ? [props["aria-describedby"]] : [];
  if (field != null && field.hasFeedbackText && field != null && field.isInvalid) {
    labelIds.push(field.feedbackId);
  }
  if (field != null && field.hasHelpText) {
    labelIds.push(field.helpTextId);
  }
  return _extends({}, rest, {
    "aria-describedby": labelIds.join(" ") || void 0,
    id: id != null ? id : field == null ? void 0 : field.id,
    isDisabled: (_ref = disabled != null ? disabled : isDisabled) != null ? _ref : field == null ? void 0 : field.isDisabled,
    isReadOnly: (_ref2 = readOnly != null ? readOnly : isReadOnly) != null ? _ref2 : field == null ? void 0 : field.isReadOnly,
    isRequired: (_ref3 = required != null ? required : isRequired) != null ? _ref3 : field == null ? void 0 : field.isRequired,
    isInvalid: isInvalid != null ? isInvalid : field == null ? void 0 : field.isInvalid,
    onFocus: callAllHandlers(field == null ? void 0 : field.onFocus, onFocus),
    onBlur: callAllHandlers(field == null ? void 0 : field.onBlur, onBlur)
  });
}
var FormErrorMessage = forwardRef(function(props, ref) {
  var styles = useMultiStyleConfig("FormError", props);
  var ownProps = omitThemingProps(props);
  var field = useFormControlContext();
  if (!(field != null && field.isInvalid))
    return null;
  return React.createElement(StylesProvider, {
    value: styles
  }, React.createElement(chakra.div, _extends({}, field == null ? void 0 : field.getErrorMessageProps(ownProps, ref), {
    className: cx("chakra-form__error-message", props.className),
    __css: _extends({
      display: "flex",
      alignItems: "center"
    }, styles.text)
  })));
});
if (__DEV__) {
  FormErrorMessage.displayName = "FormErrorMessage";
}
var FormErrorIcon = forwardRef(function(props, ref) {
  var styles = useStyles();
  var field = useFormControlContext();
  if (!(field != null && field.isInvalid))
    return null;
  var _className = cx("chakra-form__error-icon", props.className);
  return React.createElement(Icon$1, _extends({
    ref,
    "aria-hidden": true
  }, props, {
    __css: styles.icon,
    className: _className
  }), React.createElement("path", {
    fill: "currentColor",
    d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
  }));
});
if (__DEV__) {
  FormErrorIcon.displayName = "FormErrorIcon";
}
var _excluded = ["className", "children", "requiredIndicator", "optionalIndicator"];
var FormLabel = forwardRef(function(passedProps, ref) {
  var _field$getLabelProps;
  var styles = useStyleConfig("FormLabel", passedProps);
  var props = omitThemingProps(passedProps);
  props.className;
  var children = props.children, _props$requiredIndica = props.requiredIndicator, requiredIndicator = _props$requiredIndica === void 0 ? React.createElement(RequiredIndicator, null) : _props$requiredIndica, _props$optionalIndica = props.optionalIndicator, optionalIndicator = _props$optionalIndica === void 0 ? null : _props$optionalIndica, rest = _objectWithoutPropertiesLoose(props, _excluded);
  var field = useFormControlContext();
  var ownProps = (_field$getLabelProps = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _field$getLabelProps : _extends({
    ref
  }, rest);
  return React.createElement(chakra.label, _extends({}, ownProps, {
    className: cx("chakra-form__label", props.className),
    __css: _extends({
      display: "block",
      textAlign: "start"
    }, styles)
  }), children, field != null && field.isRequired ? requiredIndicator : optionalIndicator);
});
if (__DEV__) {
  FormLabel.displayName = "FormLabel";
}
var RequiredIndicator = forwardRef(function(props, ref) {
  var field = useFormControlContext();
  var styles = useStyles();
  if (!(field != null && field.isRequired))
    return null;
  var className = cx("chakra-form__required-indicator", props.className);
  return React.createElement(chakra.span, _extends({}, field == null ? void 0 : field.getRequiredIndicatorProps(props, ref), {
    __css: styles.requiredIndicator,
    className
  }));
});
if (__DEV__) {
  RequiredIndicator.displayName = "RequiredIndicator";
}

// node_modules/@chakra-ui/input/dist/chakra-ui-input.esm.js
var React2 = __toESM(require_react());
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$3 = ["htmlSize"];
var Input = forwardRef(function(props, ref) {
  var htmlSize = props.htmlSize, rest = _objectWithoutPropertiesLoose2(props, _excluded$3);
  var styles = useMultiStyleConfig("Input", rest);
  var ownProps = omitThemingProps(rest);
  var input = useFormControl(ownProps);
  var _className = cx("chakra-input", props.className);
  return React2.createElement(chakra.input, _extends2({
    size: htmlSize
  }, input, {
    __css: styles.field,
    ref,
    className: _className
  }));
});
if (__DEV__) {
  Input.displayName = "Input";
}
Input.id = "Input";
var _excluded$22 = ["placement"];
var placements = {
  left: {
    marginEnd: "-1px",
    borderEndRadius: 0,
    borderEndColor: "transparent"
  },
  right: {
    marginStart: "-1px",
    borderStartRadius: 0,
    borderStartColor: "transparent"
  }
};
var StyledAddon = chakra("div", {
  baseStyle: {
    flex: "0 0 auto",
    width: "auto",
    display: "flex",
    alignItems: "center",
    whiteSpace: "nowrap"
  }
});
var InputAddon = forwardRef(function(props, ref) {
  var _placements$placement;
  var _props$placement = props.placement, placement = _props$placement === void 0 ? "left" : _props$placement, rest = _objectWithoutPropertiesLoose2(props, _excluded$22);
  var placementStyles = (_placements$placement = placements[placement]) != null ? _placements$placement : {};
  var styles = useStyles();
  return React2.createElement(StyledAddon, _extends2({
    ref
  }, rest, {
    __css: _extends2({}, styles.addon, placementStyles)
  }));
});
if (__DEV__) {
  InputAddon.displayName = "InputAddon";
}
var InputLeftAddon = forwardRef(function(props, ref) {
  return React2.createElement(InputAddon, _extends2({
    ref,
    placement: "left"
  }, props, {
    className: cx("chakra-input__left-addon", props.className)
  }));
});
if (__DEV__) {
  InputLeftAddon.displayName = "InputLeftAddon";
}
InputLeftAddon.id = "InputLeftAddon";
var InputRightAddon = forwardRef(function(props, ref) {
  return React2.createElement(InputAddon, _extends2({
    ref,
    placement: "right"
  }, props, {
    className: cx("chakra-input__right-addon", props.className)
  }));
});
if (__DEV__) {
  InputRightAddon.displayName = "InputRightAddon";
}
InputRightAddon.id = "InputRightAddon";
var _excluded$12 = ["children", "className"];
var InputGroup = forwardRef(function(props, ref) {
  var styles = useMultiStyleConfig("Input", props);
  var _omitThemingProps = omitThemingProps(props), children = _omitThemingProps.children, className = _omitThemingProps.className, rest = _objectWithoutPropertiesLoose2(_omitThemingProps, _excluded$12);
  var _className = cx("chakra-input__group", className);
  var groupStyles = {};
  var validChildren = getValidChildren(children);
  var input = styles.field;
  validChildren.forEach(function(child) {
    if (!styles)
      return;
    if (input && child.type.id === "InputLeftElement") {
      var _input$height;
      groupStyles.paddingStart = (_input$height = input.height) != null ? _input$height : input.h;
    }
    if (input && child.type.id === "InputRightElement") {
      var _input$height2;
      groupStyles.paddingEnd = (_input$height2 = input.height) != null ? _input$height2 : input.h;
    }
    if (child.type.id === "InputRightAddon") {
      groupStyles.borderEndRadius = 0;
    }
    if (child.type.id === "InputLeftAddon") {
      groupStyles.borderStartRadius = 0;
    }
  });
  var clones = validChildren.map(function(child) {
    var _child$props, _child$props2;
    var theming = filterUndefined({
      size: ((_child$props = child.props) == null ? void 0 : _child$props.size) || props.size,
      variant: ((_child$props2 = child.props) == null ? void 0 : _child$props2.variant) || props.variant
    });
    return child.type.id !== "Input" ? React2.cloneElement(child, theming) : React2.cloneElement(child, Object.assign(theming, groupStyles, child.props));
  });
  return React2.createElement(chakra.div, _extends2({
    className: _className,
    ref,
    __css: {
      width: "100%",
      display: "flex",
      position: "relative"
    }
  }, rest), React2.createElement(StylesProvider, {
    value: styles
  }, clones));
});
if (__DEV__) {
  InputGroup.displayName = "InputGroup";
}
var _excluded3 = ["placement"];
var _excluded22 = ["className"];
var _excluded32 = ["className"];
var StyledElement = chakra("div", {
  baseStyle: {
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    position: "absolute",
    top: "0",
    zIndex: 2
  }
});
var InputElement = forwardRef(function(props, ref) {
  var _input$height, _input$height2, _extends22;
  var _props$placement = props.placement, placement = _props$placement === void 0 ? "left" : _props$placement, rest = _objectWithoutPropertiesLoose2(props, _excluded3);
  var styles = useStyles();
  var input = styles.field;
  var attr = placement === "left" ? "insetStart" : "insetEnd";
  var elementStyles = _extends2((_extends22 = {}, _extends22[attr] = "0", _extends22.width = (_input$height = input == null ? void 0 : input.height) != null ? _input$height : input == null ? void 0 : input.h, _extends22.height = (_input$height2 = input == null ? void 0 : input.height) != null ? _input$height2 : input == null ? void 0 : input.h, _extends22.fontSize = input == null ? void 0 : input.fontSize, _extends22), styles.element);
  return React2.createElement(StyledElement, _extends2({
    ref,
    __css: elementStyles
  }, rest));
});
InputElement.id = "InputElement";
if (__DEV__) {
  InputElement.displayName = "InputElement";
}
var InputLeftElement = forwardRef(function(props, ref) {
  var className = props.className, rest = _objectWithoutPropertiesLoose2(props, _excluded22);
  var _className = cx("chakra-input__left-element", className);
  return React2.createElement(InputElement, _extends2({
    ref,
    placement: "left",
    className: _className
  }, rest));
});
InputLeftElement.id = "InputLeftElement";
if (__DEV__) {
  InputLeftElement.displayName = "InputLeftElement";
}
var InputRightElement = forwardRef(function(props, ref) {
  var className = props.className, rest = _objectWithoutPropertiesLoose2(props, _excluded32);
  var _className = cx("chakra-input__right-element", className);
  return React2.createElement(InputElement, _extends2({
    ref,
    placement: "right",
    className: _className
  }, rest));
});
InputRightElement.id = "InputRightElement";
if (__DEV__) {
  InputRightElement.displayName = "InputRightElement";
}

export {
  useFormControlContext,
  FormControl,
  FormHelperText,
  useFormControl,
  useFormControlProps,
  FormErrorMessage,
  FormErrorIcon,
  FormLabel,
  RequiredIndicator,
  Input,
  InputAddon,
  InputLeftAddon,
  InputRightAddon,
  InputGroup,
  InputLeftElement,
  InputRightElement
};
//# sourceMappingURL=chunk-5WYRHUOF.js.map
